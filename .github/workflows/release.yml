name: Release
on:
  release:
    types:
      - published

permissions:
  packages: write
  attestations: write
  id-token: write
  contents: write
  repository-projects: write
  actions: write
  statuses: read

jobs:
  publish_docker_image:
    env:
      REGISTORY: ghcr.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTORY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTORY }}/${{ github.repository }}
      - name: Lowercase github.repository
        run: |
          echo "IMAGE_NAME=`echo ${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}
      - name: Get current tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: docker
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.REGISTORY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTORY }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Release
    runs-on: ubuntu-latest

    # Multi platform support
    # strategy:
    # matrix:
    # platform: [macos-latest, ubuntu-latest, windows-latest]
    # fail-fast: false

    # runs-on: ${{ matrix.platform }}

    steps:
      - name: Wait Tests
        id: test_result
        uses: Sibz/await-status-action@v1.0.1
        with:
          contexts: test-status
          authToken: ${{ secrets.GITHUB_TOKEN }}
          timeout: 30
      - name: Check Test Result
        if: steps.test_result.outputs.result != 'success'
        run: |
          echo "feiled ${{ steps.test_result.outputs.failedCheckNames }}"
          echo "status ${{ steps.test_result.outputs.failedCheckStates }}"
          exit 1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Release
        uses: goreleaser/goreleaser-action@v5
        env:
          TAP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: release --rm-dist
